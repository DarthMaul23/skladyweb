/* tslint:disable */
/* eslint-disable */
/**
 * Warehouses API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateOrderItemModel
 */
export interface CreateOrderItemModel {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderItemModel
     */
    'itemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderItemModel
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderItemModel
     */
    'unitType'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateOrderModel
 */
export interface CreateOrderModel {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderModel
     */
    'note'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderModel
     */
    'customerId'?: string;
    /**
     * 
     * @type {Array<CreateOrderItemModel>}
     * @memberof CreateOrderModel
     */
    'items'?: Array<CreateOrderItemModel> | null;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'warehouseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'quantity'?: number;
    /**
     * 
     * @type {Warehouse}
     * @memberof Item
     */
    'warehouse'?: Warehouse;
}
/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface NewItem
 */
export interface NewItem {
    /**
     * 
     * @type {string}
     * @memberof NewItem
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewItem
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewItem
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface NewWarehouseModel
 */
export interface NewWarehouseModel {
    /**
     * 
     * @type {string}
     * @memberof NewWarehouseModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewWarehouseModel
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface Offer
 */
export interface Offer {
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    'createdOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    'validUntil'?: string | null;
    /**
     * 
     * @type {Array<OfferOrganization>}
     * @memberof Offer
     */
    'offerOrganizations'?: Array<OfferOrganization> | null;
    /**
     * 
     * @type {Array<OfferItem>}
     * @memberof Offer
     */
    'offerItems'?: Array<OfferItem> | null;
}
/**
 * 
 * @export
 * @interface OfferItem
 */
export interface OfferItem {
    /**
     * 
     * @type {string}
     * @memberof OfferItem
     */
    'offerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OfferItem
     */
    'itemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OfferItem
     */
    'quantityPerOrganization'?: number;
    /**
     * 
     * @type {Offer}
     * @memberof OfferItem
     */
    'offer'?: Offer;
    /**
     * 
     * @type {Item}
     * @memberof OfferItem
     */
    'item'?: Item;
}
/**
 * 
 * @export
 * @interface OfferOrganization
 */
export interface OfferOrganization {
    /**
     * 
     * @type {string}
     * @memberof OfferOrganization
     */
    'offerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OfferOrganization
     */
    'organizationId'?: string;
    /**
     * 
     * @type {Offer}
     * @memberof OfferOrganization
     */
    'offer'?: Offer;
    /**
     * 
     * @type {Organization}
     * @memberof OfferOrganization
     */
    'organization'?: Organization;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'createdOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'note'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'customerId'?: string;
    /**
     * 
     * @type {Organization}
     * @memberof Order
     */
    'customer'?: Organization;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    'items'?: Array<OrderItem> | null;
}
/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'orderId'?: string;
    /**
     * 
     * @type {Order}
     * @memberof OrderItem
     */
    'order'?: Order;
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'itemId'?: string;
    /**
     * 
     * @type {Item}
     * @memberof OrderItem
     */
    'item'?: Item;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'unitType'?: string | null;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'location'?: string | null;
    /**
     * 
     * @type {Array<Warehouse>}
     * @memberof Organization
     */
    'warehouses'?: Array<Warehouse> | null;
}
/**
 * 
 * @export
 * @interface ResponseObject
 */
export interface ResponseObject {
    /**
     * 
     * @type {string}
     * @memberof ResponseObject
     */
    'responseStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseObject
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseObject
     */
    'exception'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponseObject
     */
    'stackTrace'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ResponseObject
     */
    'result'?: any | null;
}
/**
 * 
 * @export
 * @interface Warehouse
 */
export interface Warehouse {
    /**
     * 
     * @type {string}
     * @memberof Warehouse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Warehouse
     */
    'organizationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Warehouse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Warehouse
     */
    'location'?: string | null;
    /**
     * 
     * @type {Organization}
     * @memberof Warehouse
     */
    'organization'?: Organization;
}
/**
 * 
 * @export
 * @interface WarehouseModel
 */
export interface WarehouseModel {
    /**
     * 
     * @type {string}
     * @memberof WarehouseModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WarehouseModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WarehouseModel
     */
    'location'?: string | null;
}

/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [warehouseId] 
         * @param {NewItem} [newItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAddNewItemPost: async (warehouseId?: string, newItem?: NewItem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Item/AddNewItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (warehouseId !== undefined) {
                localVarQueryParameter['warehouseId'] = warehouseId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [warehouseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGetWarehouseItemsPost: async (warehouseId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Item/GetWarehouseItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (warehouseId !== undefined) {
                localVarQueryParameter['warehouseId'] = warehouseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} [warehouseId] 
         * @param {Item} [item] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemUpdateExistingItemItemIdPut: async (itemId: string, warehouseId?: string, item?: Item, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('itemUpdateExistingItemItemIdPut', 'itemId', itemId)
            const localVarPath = `/Item/UpdateExistingItem/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (warehouseId !== undefined) {
                localVarQueryParameter['warehouseId'] = warehouseId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(item, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [warehouseId] 
         * @param {NewItem} [newItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemAddNewItemPost(warehouseId?: string, newItem?: NewItem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemAddNewItemPost(warehouseId, newItem, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemApi.itemAddNewItemPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [warehouseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemGetWarehouseItemsPost(warehouseId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemGetWarehouseItemsPost(warehouseId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemApi.itemGetWarehouseItemsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} [warehouseId] 
         * @param {Item} [item] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemUpdateExistingItemItemIdPut(itemId: string, warehouseId?: string, item?: Item, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemUpdateExistingItemItemIdPut(itemId, warehouseId, item, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ItemApi.itemUpdateExistingItemItemIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [warehouseId] 
         * @param {NewItem} [newItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAddNewItemPost(warehouseId?: string, newItem?: NewItem, options?: any): AxiosPromise<ResponseObject> {
            return localVarFp.itemAddNewItemPost(warehouseId, newItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [warehouseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGetWarehouseItemsPost(warehouseId?: string, options?: any): AxiosPromise<ResponseObject> {
            return localVarFp.itemGetWarehouseItemsPost(warehouseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} [warehouseId] 
         * @param {Item} [item] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemUpdateExistingItemItemIdPut(itemId: string, warehouseId?: string, item?: Item, options?: any): AxiosPromise<ResponseObject> {
            return localVarFp.itemUpdateExistingItemItemIdPut(itemId, warehouseId, item, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 
     * @param {string} [warehouseId] 
     * @param {NewItem} [newItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemAddNewItemPost(warehouseId?: string, newItem?: NewItem, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemAddNewItemPost(warehouseId, newItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [warehouseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemGetWarehouseItemsPost(warehouseId?: string, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemGetWarehouseItemsPost(warehouseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {string} [warehouseId] 
     * @param {Item} [item] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemUpdateExistingItemItemIdPut(itemId: string, warehouseId?: string, item?: Item, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemUpdateExistingItemItemIdPut(itemId, warehouseId, item, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginModel?: LoginModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginModel, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LoginApi.loginPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginModel?: LoginModel, options?: any): AxiosPromise<void> {
            return localVarFp.loginPost(loginModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {LoginModel} [loginModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).loginPost(loginModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OfferApi - axios parameter creator
 * @export
 */
export const OfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offerIdDelete', 'id', id)
            const localVarPath = `/Offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offerIdGet', 'id', id)
            const localVarPath = `/Offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Offer} [offer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerIdPut: async (id: string, offer?: Offer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offerIdPut', 'id', id)
            const localVarPath = `/Offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Offer} [offer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerPost: async (offer?: Offer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferApi - functional programming interface
 * @export
 */
export const OfferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfferApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Offer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offerGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OfferApi.offerGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offerIdDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OfferApi.offerIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Offer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offerIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OfferApi.offerIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Offer} [offer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerIdPut(id: string, offer?: Offer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offerIdPut(id, offer, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OfferApi.offerIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Offer} [offer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerPost(offer?: Offer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Offer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offerPost(offer, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OfferApi.offerPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OfferApi - factory interface
 * @export
 */
export const OfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfferApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerGet(options?: any): AxiosPromise<Array<Offer>> {
            return localVarFp.offerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.offerIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerIdGet(id: string, options?: any): AxiosPromise<Offer> {
            return localVarFp.offerIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Offer} [offer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerIdPut(id: string, offer?: Offer, options?: any): AxiosPromise<void> {
            return localVarFp.offerIdPut(id, offer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Offer} [offer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerPost(offer?: Offer, options?: any): AxiosPromise<Offer> {
            return localVarFp.offerPost(offer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfferApi - object-oriented interface
 * @export
 * @class OfferApi
 * @extends {BaseAPI}
 */
export class OfferApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public offerGet(options?: RawAxiosRequestConfig) {
        return OfferApiFp(this.configuration).offerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public offerIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return OfferApiFp(this.configuration).offerIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public offerIdGet(id: string, options?: RawAxiosRequestConfig) {
        return OfferApiFp(this.configuration).offerIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Offer} [offer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public offerIdPut(id: string, offer?: Offer, options?: RawAxiosRequestConfig) {
        return OfferApiFp(this.configuration).offerIdPut(id, offer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Offer} [offer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public offerPost(offer?: Offer, options?: RawAxiosRequestConfig) {
        return OfferApiFp(this.configuration).offerPost(offer, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderIdDelete', 'id', id)
            const localVarPath = `/Order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderIdGet', 'id', id)
            const localVarPath = `/Order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Order} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdPut: async (id: string, order?: Order, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderIdPut', 'id', id)
            const localVarPath = `/Order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(order, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrderModel} [createOrderModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderPost: async (createOrderModel?: CreateOrderModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Order>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.orderGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderIdDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.orderIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.orderIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Order} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderIdPut(id: string, order?: Order, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderIdPut(id, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.orderIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrderModel} [createOrderModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderPost(createOrderModel?: CreateOrderModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderPost(createOrderModel, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.orderPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderGet(options?: any): AxiosPromise<Array<Order>> {
            return localVarFp.orderGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdGet(id: string, options?: any): AxiosPromise<Order> {
            return localVarFp.orderIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Order} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderIdPut(id: string, order?: Order, options?: any): AxiosPromise<void> {
            return localVarFp.orderIdPut(id, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrderModel} [createOrderModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderPost(createOrderModel?: CreateOrderModel, options?: any): AxiosPromise<CreateOrderModel> {
            return localVarFp.orderPost(createOrderModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderGet(options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderIdGet(id: string, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Order} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderIdPut(id: string, order?: Order, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderIdPut(id, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrderModel} [createOrderModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderPost(createOrderModel?: CreateOrderModel, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderPost(createOrderModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userIdGet', 'id', id)
            const localVarPath = `/User/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.userIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WarehouseApi - axios parameter creator
 * @export
 */
export const WarehouseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewWarehouseModel} [newWarehouseModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouseCreateWarehousePost: async (newWarehouseModel?: NewWarehouseModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Warehouse/CreateWarehouse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newWarehouseModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouseGetWarehousesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Warehouse/GetWarehouses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WarehouseModel} [warehouseModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouseUpdateWarehousePost: async (warehouseModel?: WarehouseModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Warehouse/UpdateWarehouse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(warehouseModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarehouseApi - functional programming interface
 * @export
 */
export const WarehouseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WarehouseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {NewWarehouseModel} [newWarehouseModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouseCreateWarehousePost(newWarehouseModel?: NewWarehouseModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouseCreateWarehousePost(newWarehouseModel, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WarehouseApi.warehouseCreateWarehousePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouseGetWarehousesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouseGetWarehousesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WarehouseApi.warehouseGetWarehousesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {WarehouseModel} [warehouseModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warehouseUpdateWarehousePost(warehouseModel?: WarehouseModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.warehouseUpdateWarehousePost(warehouseModel, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WarehouseApi.warehouseUpdateWarehousePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WarehouseApi - factory interface
 * @export
 */
export const WarehouseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WarehouseApiFp(configuration)
    return {
        /**
         * 
         * @param {NewWarehouseModel} [newWarehouseModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouseCreateWarehousePost(newWarehouseModel?: NewWarehouseModel, options?: any): AxiosPromise<ResponseObject> {
            return localVarFp.warehouseCreateWarehousePost(newWarehouseModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouseGetWarehousesGet(options?: any): AxiosPromise<ResponseObject> {
            return localVarFp.warehouseGetWarehousesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WarehouseModel} [warehouseModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warehouseUpdateWarehousePost(warehouseModel?: WarehouseModel, options?: any): AxiosPromise<ResponseObject> {
            return localVarFp.warehouseUpdateWarehousePost(warehouseModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WarehouseApi - object-oriented interface
 * @export
 * @class WarehouseApi
 * @extends {BaseAPI}
 */
export class WarehouseApi extends BaseAPI {
    /**
     * 
     * @param {NewWarehouseModel} [newWarehouseModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseApi
     */
    public warehouseCreateWarehousePost(newWarehouseModel?: NewWarehouseModel, options?: RawAxiosRequestConfig) {
        return WarehouseApiFp(this.configuration).warehouseCreateWarehousePost(newWarehouseModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseApi
     */
    public warehouseGetWarehousesGet(options?: RawAxiosRequestConfig) {
        return WarehouseApiFp(this.configuration).warehouseGetWarehousesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WarehouseModel} [warehouseModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseApi
     */
    public warehouseUpdateWarehousePost(warehouseModel?: WarehouseModel, options?: RawAxiosRequestConfig) {
        return WarehouseApiFp(this.configuration).warehouseUpdateWarehousePost(warehouseModel, options).then((request) => request(this.axios, this.basePath));
    }
}



